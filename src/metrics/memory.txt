# -*- coding: utf-8 -*-

from ..utils.conversions import convert_human, convert_percent
from ..network.downloader import get_query_data
from .metric import HardwareModel

class RAM(object):
    def __init__(self):
        self.total = 0
        self.free = 0
        self.buffer = 0
        self.cached = 0

    def get_total(self): return self.total
    def get_free(self): return self.free
    def get_buffer(self): return self.buffer
    def get_cached(self): return self.cached

    def set_total(self, _total):
        self.total = _total
    
    def set_free(self, _free):
        self.free = _free

    def set_buffer(self, _buffer):
        self.buffer = _buffer

    def set_cached(self, _cached):
        self.cached = _cached


class Swap(object):
    def __init__(self):
        self.total = 0
        self.free = 0

    def get_total(self): return self.total
    def get_free(self): return self.free

    def set_total(self, _total):
        self.total = _total

    def set_free(self, free):
        self.free = _free


class MemoryModel(HardwareModel):
    def __init__(self):
        HardwareModel().__init__(self)
        self.ram = RAM()
        self.swap = Swap()
        self.is_valid = True
        self.used_ram = 0
        self.used_swap = 0    

    def get_is_valid(self):
        return self.is_valid

    def get_used_ram(self):
        return self.used_ram
    
    def get_used_swap(self):
        return self.used_swap

    def set_is_valid(self, _is_valid):
        self.is_valid = _is_valid

    def set_used_ram(self):
        self.used_ram = self.ram.get_total() - (self.ram.get_free() + self.ram.get_buffer() + self.ram.get_cached())
    
    def set_used_swap(self):
        self.used_swap = self.swap.get_total() - self.swap.get_free()

    def calc_percent_used_ram(self):
        return self.used_ram / self.ram.get_total() * 100

    def calc_percent_used_swap(self):
        return self.used_swap / self.swap.get_total() * 100

    def display_ram_usage(self):
        print("RAM Usage: ", convert_human(self.used_ram), " - ", convert_percent(self.calc_percent_used_ram), " %")

    def display_swap_usage(self):
        print("Swap Usage: ", convert_human(self.used_swap), " - ", convert_percent(self.calc_percent_used_swap), " %")


def init():
    return MemoryModel()

def refresh(locator_repository):
    get_query_data([
        locator_repository['RAM-total'],
        locator_repository['RAM-free'],
        locator_repository['RAM-buffer'],
        locator_repository['RAM-cached'],
        locator_repository['Swap-total'],
        locator_repository['Swap-free']
    ])

def update(memory, locator_repository):
    return parse(memory, locator_repository)

def parse(memory, locarot_repository):
    pass